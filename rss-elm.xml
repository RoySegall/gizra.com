<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
  <channel>
    <description></description>
    <title>Gizra</title>
    <link>https://www.gizra.com</link>
    <lastBuildDate>Sun, 25 Feb 2018 06:40:41 -0600</lastBuildDate>
    <pubDate>Sun, 25 Feb 2018 06:40:41 -0600</pubDate>
    <ttl>1800</ttl>

    
      
      

      
      <item>
        <title>Travis - The Need for Speed</title>
        <description>
          &lt;p&gt;Chances are that you already use Travis or another cool CI to execute your tests, and everyone politely waits for the CI checks before even thinking about merging, right? More likely, waiting your turn becomes a pain and you click on the merge: it’s a trivial change and you need it now. If this happens often, then it’s the responsibility of those who worked on those scripts that Travis crunches to make some changes. There are some trivial and not so trivial options to make the team always be willing to wait for the completion.&lt;/p&gt;

&lt;p&gt;This blog post is for you if you have a project with Travis integration, and you’d like to maintain and optimize it, or just curious what’s possible. Users of other CI tools, keep reading, many areas may apply in your case too.&lt;/p&gt;

&lt;p&gt;Unlike other performance optimization areas, doing before-after benchmarks is not so crucial, as Travis mostly collects the data, you just have to make sure to do the math and &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/pull/171#issuecomment-334493419&quot;&gt;present the numbers proudly&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;caching&quot;&gt;Caching&lt;/h2&gt;

&lt;p&gt;To start, if your &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; lacks the &lt;code class=&quot;highlighter-rouge&quot;&gt;cache:&lt;/code&gt; directive, then you might start in the easiest place: caching dependencies. For a Drupal-based project, it’s a good idea to think about caching all the modules and libraries that must be downloaded to build the project (it uses a buildsystem, doesn’t it?). So even a variant of:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$HOME/.composer/cache/files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or for Drush&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$HOME/.drush/cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s explained well in the verbose &lt;a href=&quot;https://docs.travis-ci.com/user/caching&quot;&gt;documentation&lt;/a&gt; at Travis-ci.com. Before your script is executed, Travis populates the cache directories automatically from a successful previous build. If your project has only a few packages, it won’t help much, and actually it can make things even slower. What’s critical is that we need to cache slow-to-generate, easy-to-download materials. Caching a large ZIP file would not make sense for example, caching many small ones from multiple origin servers would be more beneficial.&lt;/p&gt;

&lt;p&gt;From this point, you could just read the standard documentation instead of this blog post, but we also have icing on the cake for you. A Drupal installation can take several minutes, initializing all the modules, executing the logic of the install profile and so on. Travis is kind enough to provide a bird’s-eye view on what eats up build time:&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/travis-speed/travis-benchmark.png&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
    &lt;div class=&quot;ui attached center aligned caption segment&quot;&gt;
      Execution speed measurements built in the log
    &lt;/div&gt;
  
&lt;/div&gt;

&lt;p&gt;Mind the bottleneck when making a decision on what to cache and how.&lt;/p&gt;

&lt;p&gt;For us, it means cache of the installed, initialized Drupal database and the full document root. Cache invalidation is hard, we can’t change that, but it turned out to be a good compromise between complexity and execution speed gain, check our examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/blob/master/ci-scripts/pre_cache.sh&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pre_cache.sh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/blob/master/ci-scripts/post_cache.sh&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;post_cache.sh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do your homework and cache what’s the most resource-consuming to generate, SQL database, built source code or compiled binary, Travis is here to assist with that.&lt;/p&gt;

&lt;h2 id=&quot;software-versions&quot;&gt;Software Versions&lt;/h2&gt;

&lt;p&gt;There are two reasons to pay attention to software versions.&lt;/p&gt;

&lt;h3 id=&quot;use-pre-installed-versions&quot;&gt;Use Pre-installed Versions&lt;/h3&gt;
&lt;p&gt;Travis uses containers of different distributions, let’s say you use &lt;code class=&quot;highlighter-rouge&quot;&gt;trusty&lt;/code&gt;, the default one these days, then if you choose   PHP 7.0.7, it’s &lt;a href=&quot;https://docs.travis-ci.com/user/reference/trusty/#PHP-images&quot;&gt;pre-installled&lt;/a&gt;, in case of 7.1, it’s needed to fetch separately and that takes time for every single build. When you have production constraints, that’s almost certainly more important to match, but in some cases, using the pre-installed version can speed things up.&lt;/p&gt;

&lt;p&gt;And moreover, let’s say you prefer &lt;a href=&quot;https://docs.travis-ci.com/user/database-setup/#MariaDB&quot;&gt;MariaDB&lt;/a&gt; over MySQL, then do not &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; and start to install it with the package manager, as there is the add-on system to make it available. The same goes for &lt;a href=&quot;https://docs.travis-ci.com/user/chrome&quot;&gt;Google Chrome&lt;/a&gt;, and so on.
Stick to what’s inside the image already if you can.  Exploit that possibility of what Travis can fetch via the YML definition!&lt;/p&gt;

&lt;h3 id=&quot;use-the-latest-and-or-greatest&quot;&gt;Use the Latest and (or) Greatest&lt;/h3&gt;

&lt;p&gt;If you ever read an article about the performance gain from migrating to PHP 7, you sense the importance of selecting the versions carefully. If your build is PHP-execution heavy, fetching PHP 7.2 (it’s another leap, but mind the &lt;a href=&quot;http://php.net/manual/en/migration72.incompatible.php&quot;&gt;backward incompatibilities&lt;/a&gt;) could totally make sense and it’s as easy as can be after making your code compatible:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;7.2'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Almost certainly, a similar thing could be written about Node.js, or relational databases, etc. If you know what’s the bottleneck in your build and find the best performing versions – newer or older – it will improve your speed. Does that conflict with the previous point about pre-installed versions? Not really, just measure which one helps your build the most!&lt;/p&gt;

&lt;h2 id=&quot;make-it-parallel&quot;&gt;Make it Parallel&lt;/h2&gt;

&lt;p&gt;When a Travis job is running, 2 cores and 4 GBytes of RAM is &lt;a href=&quot;https://docs.travis-ci.com/user/reference/overview/#Virtualization-environments&quot;&gt;available&lt;/a&gt; – that’s something to rely on! Downloading packages should happen in parallel. &lt;code class=&quot;highlighter-rouge&quot;&gt;drush make&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; and other tools like that might use it out of the box: check your parameters and configfiles. However, on the higher level, let’s say you’d like to execute a unit test and a browser-based test, as well. You can ask Travis to spin up two (or more) containers concurrently. In the first, you can install the unit testing dependencies and execute it; then the second one can take care of only the functional test. We have a fine-grained example of this approach in our &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/blob/master/.travis.yml#L10&quot;&gt;Drupal-Elm Starter&lt;/a&gt;, where 7 containers are used for various testing and linting. In addition to the great execution speed reduction, the benefit is that the result is also more fine-grained, instead of having a single boolean value, just by checking the build, you have an overview what can be broken.&lt;/p&gt;

&lt;p&gt;All in all, it’s a warm fuzzy feeling that Travis is happy to create so many containers for your humble project:&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/travis-speed/parallel.gif&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
    &lt;div class=&quot;ui attached center aligned caption segment&quot;&gt;
      If it's independent, no need to serialize the execution
    &lt;/div&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;utilize-ram&quot;&gt;Utilize RAM&lt;/h2&gt;

&lt;p&gt;The available memory is currently between 4 and 7.5 GBytes , depending on the configuration, and it should be used as much as possible. One example could be to move the database main working directory to a memory-based filesystem. For many simpler projects, that’s absolutely doable and at least for Drupal, a solid speedup. Needless to say, we have an &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/blob/master/ci-scripts/install_server.sh#L13&quot;&gt;example&lt;/a&gt; and on client projects, we saw 15-30% improvement at SimpleTest execution. For traditional RMDBS, you can give it a try. If your DB cannot fit in memory, you can still ask &lt;a href=&quot;https://www.percona.com/blog/2013/09/20/innodb-performance-optimization-basics-updated/&quot;&gt;InnoDB to fill memory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Think about your use case – even moving the whole document root there could be legitimate. Also if you need to compile a source code, doing it there makes sense as well.&lt;/p&gt;

&lt;h2 id=&quot;build-your-own-docker-image&quot;&gt;Build Your Own Docker Image&lt;/h2&gt;

&lt;p&gt;If your project is really exotic or a legacy one, it potentially makes sense to maintain your own Docker image and then download and execute it in Travis. We did it in the past and then &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/pull/165/files&quot;&gt;converted&lt;/a&gt;. Maintaining your image means recurring effort, fighting with outdated versions, unavailable dependencies, that’s what to expect. Still, even it could be a type of performance optimization if you have lots of software dependencies that are hard to install on the current Travis container images.&lt;/p&gt;

&lt;h2 id=&quot;1---debug-with-ease&quot;&gt;+1 - Debug with Ease&lt;/h2&gt;

&lt;p&gt;To work on various improvements in the Travis integration for your projects, it’s a &lt;em&gt;must&lt;/em&gt; to spot issues quickly. What worked on localhost, might or might not work on Travis – and you should know the root cause quickly.&lt;/p&gt;

&lt;p&gt;In the past, we propagated &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/pull/165/files&quot;&gt;video recording&lt;/a&gt;, now I’d recommend something else. You have a web application, for all the backend errors, there’s a tool to access the logs, at Drupal, you can use Drush. But what about the frontend? Headless Chrome is neat, it has built-in debugging capability, the best of which is that you can break out of the box using Ngrok. Without any X11 forwarding (which is not available) or a local hack to try to mimic Travis, you can play with your app running in the Travis environment. All you need to do is to execute a &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/pull/165/files&quot;&gt;Debug build&lt;/a&gt;, execute the installation part (&lt;code class=&quot;highlighter-rouge&quot;&gt;travis_run_before_install&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;travis_run_install&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;travis_run_before_script&lt;/code&gt;), start Headless Chrome (&lt;code class=&quot;highlighter-rouge&quot;&gt;google-chrome --headless --remote-debugging-port=9222&lt;/code&gt;), download &lt;a href=&quot;https://ngrok.com/download&quot;&gt;Ngrok&lt;/a&gt;, start a tunnel (&lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok http 9222&lt;/code&gt;), visit the exposed URL from your local Chrome and have fun with inspection, debugger console, and &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;more&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h2&gt;

&lt;p&gt;Working on such improvements has benefits of many kinds. The entire development team can enjoy the shorter queues and faster merges, and you can go ahead and apply part of the enhancements to your local environment, especially if you dig deep into database performance optimization and make the things parallel. And even more, clients love to hear that you are going to speed up their sites, as this mindset should be also used at production.&lt;/p&gt;

          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/travis-speed//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/travis-speed/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/Travis-speed</guid>
        <pubDate>Fri, 16 Feb 2018 00:00:00 -0600</pubDate>
      </item>
      
    
      
      

      
      <item>
        <title>Expressing a Relationship between Multiple Types in Elm</title>
        <description>
          &lt;p&gt;Elm’s type system is sufficiently sophisticated that you’ll often want to make
fine-grained distinctions between roughly similar types.  In a
&lt;a href=&quot;/projects/#e-heza-emr-application&quot;&gt;recent project&lt;/a&gt;, for instance, we ended up
with a separate type for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mother&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Child&lt;/code&gt;.&lt;sup id=&quot;fnref:nofathers&quot;&gt;&lt;a href=&quot;#fn:nofathers&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Now, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mother&lt;/code&gt;
is a little different than a &lt;code class=&quot;highlighter-rouge&quot;&gt;Child&lt;/code&gt;. Most obviously, mothers have children,
whereas (at least, in our data model) children do not. So, it was nice for them
to be separate types. In fact, there were certain operations which could be done
on a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mother&lt;/code&gt; but not a &lt;code class=&quot;highlighter-rouge&quot;&gt;Child&lt;/code&gt; (and vice versa). So it was nice to be able to
enforce that at the type level.&lt;/p&gt;

&lt;p&gt;Yet, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mother&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Child&lt;/code&gt; clearly have a lot in common as well. For this
reason, it sometimes felt natural to write functions that could accept either.  So, in
those cases, it was a little awkward for them to be separate types.  Something
was needed to express a relationship between the two types.&lt;/p&gt;

&lt;p&gt;What alternatives are available to do this sort of thing in Elm? Which did we
end up choosing? For answers to these questions, and more, read on!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:nofathers&quot;&gt;

      &lt;p&gt;There were no fathers in our app’s data model. &lt;a href=&quot;#fnref:nofathers&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/elm-related-types//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/elm-related-types/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/elm-related-types</guid>
        <pubDate>Tue, 06 Feb 2018 00:00:00 -0600</pubDate>
      </item>
      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
      <item>
        <title>Integrating Javascript into Elm: Alternatives to Ports</title>
        <description>
          &lt;p&gt;Once you start writing apps (and packages) in &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, it’s
tempting to avoid the rough-and-tumble world of Javascript as much as possible.
Yet when implementing features for paying clients, it doesn’t always make sense
to take things that already have a Javascript implementation and re-implement
them in pure Elm. In fact, sometimes it isn’t even possible!&lt;/p&gt;

&lt;p&gt;Now, Elm has a very fine mechanism for integrating bits of Javascript when
necessary – &lt;a href=&quot;https://guide.elm-lang.org/interop/javascript.html&quot;&gt;ports&lt;/a&gt;!
Yet ports aren’t always the right answer, and there are several alternatives
which can be useful in certain situations.&lt;/p&gt;

&lt;p&gt;For the purposes of this post, I’m going to assume that you’re familiar with
the many cases in which ports work well, and focus instead on a few cases where
you might want to try something else:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When you want synchronous answers.&lt;/li&gt;
  &lt;li&gt;When you need some context when you get the answer.&lt;/li&gt;
  &lt;li&gt;When you want to manage parts of the DOM using Javascript.&lt;/li&gt;
&lt;/ul&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/elm-port-alternatives//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/elm-port-alternatives/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/elm-port-alternatives</guid>
        <pubDate>Fri, 05 Jan 2018 00:00:00 -0600</pubDate>
      </item>
      
    
      
      

      
      <item>
        <title>Have Your Cake and Eat it Too: Elm Apps in Drupal Panels</title>
        <description>
          &lt;p&gt;I tell my kids all the time that they can’t have both - whether it’s ice cream and cake or pizza and donuts - and they don’t like it. It’s because kids are uncorrupted, and their view of the world is pretty straightforward - usually characterized by a simple question: why not?&lt;/p&gt;

&lt;p&gt;And so it goes with web projects:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stakeholder:&lt;/strong&gt; I want it to be like [&lt;em&gt;insert billion dollar company&lt;/em&gt;]’s site where the options refresh as the user makes choices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; [&lt;em&gt;Thinks to self, “Do you know how many millions of dollars went into that?”&lt;/em&gt;] Hmm, well, it’s complicated…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stakeholder:&lt;/strong&gt; What do you mean? I’ve seen it in a few places [&lt;em&gt;names other billion dollar companies&lt;/em&gt;].&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; [&lt;em&gt;Gosh, you know, you’re right&lt;/em&gt;] Well, I mean, that’s a pretty sophisticated application, and well, your current site is Drupal, and well, Drupal is in fact really great for decoupled solutions, but generally we’d want to redo the whole architecture… and that’s kind of a total rebuild…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stakeholder:&lt;/strong&gt; [&lt;em&gt;eyes glazed over&lt;/em&gt;] Yeah, we don’t want to do that.&lt;/p&gt;

&lt;p&gt;But there’s is a way.&lt;/p&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/elm-in-drupal-panels//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/elm-in-drupal-panels/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/elm-in-drupal</guid>
        <pubDate>Tue, 02 Jan 2018 00:00:00 -0600</pubDate>
      </item>
      
    
      
      

      
      <item>
        <title>Selling an Item for $1.6M with Elm and Headless Drupal</title>
        <description>
          &lt;p&gt;If you happen to know Brice - my colleague and Gizra’s CEO - you probably have picked up that he doesn’t get rattled too easily. While I find myself developing extremely annoying ticks during stressful situations, Brice is a role model for stoicism.&lt;/p&gt;

&lt;p&gt;Combine that with the fact that he knows I dislike speaking on the phone, let alone at 6:53pm, almost two hours after my work day is over, you’d probably understand why I was surprised to get a call from him. “Surprised” as in, immediately getting a stomach ache.&lt;/p&gt;

&lt;p&gt;The day I got that call from him was a Sale day. You see, we have this product we’ve developed called ״Circuit Auction״, which allows auction houses to manage their catalog and run live, real-time, auction sales - the “Going once, Going twice” type.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; “Listen Bruce,” (that’s how I call him) “I’m on my way to working out. Did something crash?”
I don’t always think that the worst has happened, but you did just read the background.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; “No.”&lt;/p&gt;

&lt;p&gt;I was expecting a long pause. In a way, I think he kind of enjoys those moments, where he knows I don’t know if it’s good or bad news. In a way, I think I actually do somehow enjoy them myself. But instead he said, “Are you next to a computer?”&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; “No. I’m in the car. Should I turn back? What happened?”&lt;/p&gt;

&lt;p&gt;I really hate to do this, but in order for his next sentence to make sense I have to go back exactly 95 years, to 1922 Tokyo, Japan.&lt;/p&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/selling-item-for-millions-elm-headless-drupal//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/selling-item-for-millions-elm-headless-drupal/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/elm-circuit</guid>
        <pubDate>Mon, 25 Dec 2017 00:00:00 -0600</pubDate>
      </item>
      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
      <item>
        <title>Travis and WDIO - Breaking out of the Black Box</title>
        <description>
          &lt;p&gt;Chances are that you already using Travis or another Cool CI to execute your tests. Very often getting boolean or textual output from the execution is enough, because knowing which tests are failing is a good starting point to start to debug the problematic code. In our case, with WebdriverI/O (WDIO) and with an architecture where the frontend and backend are decoupled, it’s much more complicated.&lt;/p&gt;

&lt;p&gt;It might be that the browser could not click on an element, or the frontend could not contact the backend, or the frontend has a runtime error (well, you might be faced with it, but at Gizra we use &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, where it is practically impossible). Who knows, even the browser could crash due to lack of memory - the same applies to Travis too. One solution is to manually start reproducing what Travis does. It’s fun the first time, but doing it again and again is just a waste of time. But recently, our CTO, Amitai gave excellent pointers about dockerized Selenium and insisted that having video recordings is much better than simple static screenshots - and it was so true.&lt;/p&gt;

&lt;p&gt;These days at Gizra - on client projects - we can benefit by knowing exactly how and why our browser-based tests failed. The fact that we already used &lt;a href=&quot;/content/docker-travis-ci/&quot;&gt;Docker inside Travis&lt;/a&gt; helped a lot, but this additional video recording on the browser-based test makes the life of the developers much easier.&lt;/p&gt;

&lt;h2 id=&quot;ingredients&quot;&gt;Ingredients&lt;/h2&gt;

&lt;p&gt;Let’s overview what’s bundled into &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter&quot;&gt;Drupal Elm Starter&lt;/a&gt;, and who is responsible for what.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Upon a push, GitHub invokes Travis to start a build, that’s just the standard for many projects on GitHub for a long time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Travis executes a set of &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/blob/master/.travis.yml#L9&quot;&gt;shell scripts&lt;/a&gt; according to the &lt;a href=&quot;https://docs.travis-ci.com/user/customizing-the-build#Build-Matrix&quot;&gt;build matrix&lt;/a&gt;. The only noteworthy thing is that using the build matrix with environment variables can be used to test the things in parallel - like one element of the matrix is the WDIO test, and another element could be any kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_(software)&quot;&gt;Lint&lt;/a&gt; to scrutinize the code quality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From this point, we only focus on one element of the build matrix. Docker Compose &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/blob/master/ci-scripts/docker\_files/docker-compose.yml&quot;&gt;launches&lt;/a&gt; two containers, one with the application and the test code, the other with a &lt;a href=&quot;https://github.com/zalando/zalenium&quot;&gt;Selenium Grid&lt;/a&gt;. It also helps the containers talk to &lt;a href=&quot;https://docs.docker.com/compose/networking/&quot;&gt;each other&lt;/a&gt; via expressive hostnames.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The WDIO executes our test suites, but the Selenium host is not localhost, but rather the address of the other Docker container. This way Zalenium is able to &lt;a href=&quot;https://github.com/zalando/zalenium#using-it&quot;&gt;record a video&lt;/a&gt; of the WDIO tests, it hosts the browser, the Selenium Grid and ffmpeg to encode the movie on-the-fly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Google Drive hosts the videos of the &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/blob/master/ci-scripts/test_server.sh#L77&quot;&gt;failed tests&lt;/a&gt;. To use Google Drive programmatically, &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/blob/master/server/README.md#google-drive-integration&quot;&gt;several steps&lt;/a&gt; are needed, but the &lt;a href=&quot;https://github.com/prasmussen/gdrive&quot;&gt;gdrive&lt;/a&gt; uploader tool has excellent documentation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the very end, &lt;a href=&quot;https://github.com/Gizra-robot&quot;&gt;Gizra Robot&lt;/a&gt; posts a comment on the &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/blob/master/ci-scripts/test_server.sh#L94&quot;&gt;conversation thread of the pull request&lt;/a&gt;. Adding a robot user to GitHub &lt;a href=&quot;https://help.github.com/articles/differences-between-user-and-organization-accounts/&quot;&gt;is not different&lt;/a&gt; from adding a human - you can create a new GitHub user and dedicate it to this purpose. The exact process is &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/blob/master/server/README.md#github-integration&quot;&gt;documented&lt;/a&gt; in the repository.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-result&quot;&gt;The result&lt;/h3&gt;

&lt;p&gt;You can see an example video of the test on a &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/pull/93#issuecomment-298260575&quot;&gt;recent pull request&lt;/a&gt;. The icing on the cake is that if you receive the GitHub notification email to your GMail inbox, you can launch a video straight from there via a YouTube player!&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/travis-wdio/sample-recording.gif&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
    &lt;div class=&quot;ui attached center aligned caption segment&quot;&gt;
      WebdriverI/O in action
    &lt;/div&gt;
  
&lt;/div&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;I joined Gizra three months ago, and the &lt;a href=&quot;https://www.thegizraway.com/&quot;&gt;Gizra Way&lt;/a&gt;’s time-box/escalation system helped a lot to accomplish this task, where many layers of the CI stack were new to me. Needless to say, debugging Travis is hard. And then, you need to wait. And wait. A lot. Then your issue has a &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/issues/83&quot;&gt;timebox&lt;/a&gt; on it, so hard things must be done quickly and by following best practices.&lt;/p&gt;

&lt;p&gt;Seems impossible, right?&lt;/p&gt;

&lt;p&gt;My experience is that this rigorous workflow helped me to find creative ways to solve the problems (not talking about ugly hacks here - just merely changing the way to find proper solutions), if the complexity is adequately calibrated to the developer, it triggers good stress that helps in problem solving too and contributes to the work satisfaction.&lt;/p&gt;

&lt;p&gt;Let’s see how I was led to make it happen.&lt;/p&gt;

&lt;h3 id=&quot;dissect-steps&quot;&gt;Dissect steps&lt;/h3&gt;
&lt;p&gt;It seems to be obvious that you need to break the problem into smaller chunks, but when the testability is so problematic, you must follow this principle very strictly. In this case, the most helpful was to test the different units in the simplest environment as possible. For instance there’s a Bash script that’s responsible for the GitHub upload. Instead of launching the script via Travis or via a &lt;a href=&quot;https://docs.travis-ci.com/user/common-build-problems/#Running-a-Container-Based-Docker-Image-Locally&quot;&gt;similar local environment&lt;/a&gt;, in the native local environment, just feeding the script with the proper environment variables, what Travis would do, helped to speed up the process to almost real time debuggability.&lt;/p&gt;

&lt;p&gt;Even a small Bash construct can be extracted and tested separately. Same for a &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; invocation that posts a comment on GitHub. So in the end, I enjoyed the efficiency that came from the way of testing all the things with the minimally needed context - without all the hassle.&lt;/p&gt;

&lt;h3 id=&quot;invest-in-easy-troubleshooting&quot;&gt;Invest in easy troubleshooting&lt;/h3&gt;
&lt;p&gt;It was a strong sign that we wanted to invest a significant amount to have this functionality at our project template, at Elm Starter, just to help future work. Similarly on the low level, it was mandatory at some point to be able to SSH into the Travis build. It’s enabled for private repositories, but in our case, it was mandatory to write to Travis support and this way, for our public repository, it was possible to use this functionality. It helped a lot to understand why the process behaves differently than at the local environment.&lt;/p&gt;

&lt;h3 id=&quot;contributing-what-you-can&quot;&gt;Contributing what you can&lt;/h3&gt;
&lt;p&gt;During the implementation, there were some issues with Zalenium, the side container, which provided Selenium Grid and the video recording (https://github.com/zalando/zalenium/pull/92). It got merged to upstream after 12 days, mostly the time the maintainer waited for my answer. It is just a little documentation fix, but it might save fellow developers frustration. On my side, I had the confirmation from the most capable person that I should not try to use &lt;code class=&quot;highlighter-rouge&quot;&gt;--abort-on-exit&lt;/code&gt; with that container. Such scenarios reinforces the best practice, give back what you have, either it is knowledge, a patch or a full-blown solution.&lt;/p&gt;

&lt;h2 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h2&gt;

&lt;p&gt;The solution that is publicly available at the &lt;a href=&quot;https://github.com/Gizra/drupal-elm-starter/tree/master/ci-scripts&quot;&gt;repository&lt;/a&gt; is easy to re-use in any project that has a similar browser-based test, the only criteria is that it should support the execution on a Selenium Grid. You might capture videos of your pure Simpletest, Behat, WDIO or Nightwatch.js (and who knows what kind of other test frameworks are out there in the wild) test suite and port this code from Drupal Elm Starter to easily understand why your test fails, the only criteria is that you should be able to execute Zalenium Docker container aside. Pull requests are more than welcome to make the process more robust or even sleeker!&lt;/p&gt;

          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/travis-wdio//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/travis-wdio/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/Travis-WDIO</guid>
        <pubDate>Tue, 23 May 2017 00:00:00 -0500</pubDate>
      </item>
      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
      <item>
        <title>Elm from a Business Perspective</title>
        <description>
          &lt;p&gt;Elm, like any rising open source project, is getting both positive endorsements and negative critiques. Reading the good ones, is always fun; but the negative ones are just as important.&lt;/p&gt;

&lt;p&gt;Today, I came across this: &lt;a href=&quot;http://reasonablypolymorphic.com/blog/elm-is-wrong&quot;&gt;Elm Is Wrong&lt;/a&gt;, and realized that I’ve always read the good and bad critiques from a &lt;em&gt;technical&lt;/em&gt; point of view, but I have yet to read about what it means from a &lt;em&gt;business&lt;/em&gt; perspective.&lt;/p&gt;

&lt;p&gt;I can assure you it’s a different perspective. One that is about dollars and the cost of bugs - not about “type classes” or “higher kinded types.”&lt;/p&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/elm-business-perspective//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/elm-business-perspective/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/elm-business-perspective</guid>
        <pubDate>Wed, 09 Nov 2016 00:00:00 -0600</pubDate>
      </item>
      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
      <item>
        <title>Web Frameworks, Proof of Concept, and Building an Inbox Simulation</title>
        <description>
          &lt;h2 id=&quot;baseball-apple-pie-and-web-frameworks&quot;&gt;Baseball, Apple Pie, and Web Frameworks&lt;/h2&gt;
&lt;p&gt;I like baseball better than football (the American version). Football is a &lt;a href=&quot;https://www.youtube.com/watch?v=_Z_7eu64y6c&quot;&gt;game of inches&lt;/a&gt; – but it’s measured in yards. Imprecise scope is built into the system. Baseball, on the other hand, is a game of wildly random occurrences that are often measured to the third decimal place. An &lt;a href=&quot;http://sabr.org/sabermetrics&quot;&gt;entire framework exists&lt;/a&gt; to understand the smallest, yet important, details of the game.&lt;/p&gt;

&lt;p&gt;What I like about baseball is what I like about the current state of web applications. There is a growing set of frameworks that allow you to “scratch your own itch” and be precise about your scope in ways that you never could before. I really like going to web conferences, and seeing things like Drupal being used as a backend to serve content to some other front-end framework (enter your favorite: Angular, React, Ember) that can bend, shape, and re-present that content in ways that Drupal never imagined.&lt;/p&gt;

&lt;p&gt;And as a web development agency that focuses on complex content management, that has huge – and really exciting – implications for how we do business.&lt;/p&gt;

&lt;h2 id=&quot;whats-a-major-corporation-to-do&quot;&gt;What’s a Major Corporation To Do?&lt;/h2&gt;
&lt;p&gt;Take for example a conversation that started with someone that does training and assessment at a Fortune 50 corporation – one that trains a lot of employees. At some point she asked me “Do you guys do inbox simulations?” I had to think for a second if I even knew what inbox simulation was - and it turns out, it’s exactly what it sounds like: a simulated email inbox to test and assess an employee’s response and prioritization skills.&lt;/p&gt;

&lt;p&gt;My first response was “No,” and my second – almost immediate – followup was, “but I don’t see why we couldn’t.”&lt;/p&gt;

&lt;p&gt;The problem they had was that none of the software they had tried was giving them precisely what they needed. And that’s not surprising. There are more than 500 Learning Management Systems on the market, each with it’s own bloated feature set trying to solve specific use cases with general tools. It’s also not surprising that &lt;a href=&quot;http://www.capterra.com/learning-management-system-software/user-research&quot;&gt;fewer than 25%&lt;/a&gt; of corporate LMS users are “very satisfied” with their system. Given the large features sets and the likely time it took to get them to market, most of them are probably built on technology that’s already five years old.&lt;/p&gt;

&lt;h2 id=&quot;enter-proof-of-concept&quot;&gt;Enter Proof of Concept&lt;/h2&gt;
&lt;p&gt;That conversation led to a “show us what you can do” meeting. This was a problem because, well, we had never done it before. My five-or-six-years-ago brain said to myself, “We can’t possibly create a demo of an inbox simulation – I’ll just put together a slide deck that explains what I’m talking about here with web frameworks.”&lt;/p&gt;

&lt;p&gt;That’s when &lt;a href=&quot;/team/#amitaibu&quot;&gt;Amitai&lt;/a&gt; said, “Let’s create an inbox simulation for your meeting – we can do it in &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;. Open a repo and I’ll show you how. What should it have?”&lt;/p&gt;

&lt;p&gt;I answered (dubiously), “Well, it should look and feel like an Outlook inbox, and we should be able to demonstrate that their training logic can be applied to simple email tasks.”&lt;/p&gt;

&lt;p&gt;“You mean like if you respond one way, you get a certain response back.”&lt;/p&gt;

&lt;p&gt;“Yeah, something like that.”&lt;/p&gt;

&lt;h2 id=&quot;the-scaffolding-of-an-inbox&quot;&gt;The Scaffolding of an Inbox&lt;/h2&gt;
&lt;p&gt;So I opened a &lt;a href=&quot;https://github.com/Gizra/inbox-simulation&quot;&gt;repository&lt;/a&gt; for the project, which at Gizra starts with a stack that includes a location to create static prototype pages served by &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and is automatically updated and published by &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;. The &lt;a href=&quot;http://semantic-ui.com/&quot;&gt;Semantic UI&lt;/a&gt; CSS framework is included so that we get all the goodies that come with it and don’t need to recreate the wheel on design elements (we recently switched from Bootstrap, and I already like it a lot better, if not just because our prototypes don’t look like &lt;a href=&quot;http://adventurega.me/bootstrap/&quot;&gt;every Bootstrap website ever&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In a perfect world, I wanted three things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An &lt;strong&gt;inbox&lt;/strong&gt; that looked realistic.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;dashboard&lt;/strong&gt; that reflected activity in the inbox.&lt;/li&gt;
  &lt;li&gt;An &lt;strong&gt;admin screen&lt;/strong&gt; that allowed manipulation of the inbox content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I started with the admin screen, because that seemed the least daunting.&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/elm-inbox-simulator/admin-sketch.jpg&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
    &lt;div class=&quot;ui attached center aligned caption segment&quot;&gt;
      I am a terrible sketch artist, and I often don't carry paper. This was sketched on a napkin from a coffee shop.
    &lt;/div&gt;
  
&lt;/div&gt;

&lt;p&gt;Once I had the idea, I moved quickly into the static prototype, because my CSS skills dramatically outweigh my drawing skills.&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/elm-inbox-simulator/admin-prototype.jpg&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
    &lt;div class=&quot;ui attached center aligned caption segment&quot;&gt;
      That's a little better.
    &lt;/div&gt;
  
&lt;/div&gt;

&lt;p&gt;The next step was the inbox itself, and because I wanted it to look like Outlook, we figured we could try to grab the HTML, CSS and JS from an Outlook Online account that I had created for this purpose.&lt;/p&gt;

&lt;p&gt;What a ridiculous mess that was.&lt;/p&gt;

&lt;p&gt;Thirty minutes into that task, I realized it would be easier to recreate the inbox from scratch. Semantic UI made it pretty easy.The Font Awesome icons already there, and the fact that it’s &lt;a href=&quot;https://www.w3.org/TR/css-flexbox/&quot;&gt;flexbox&lt;/a&gt; friendly, meant that I had a pretty good static version up in about 4 hours (it could have been faster, but it was my first time really using Semantic UI, and I was trying to follow strict &lt;a href=&quot;http://getbem.com/&quot;&gt;BEM&lt;/a&gt; principles, which we also recently started at Gizra).&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/elm-inbox-simulator/inbox-prototype.jpg&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
    &lt;div class=&quot;ui attached center aligned caption segment&quot;&gt;
      Starting to look like the real thing.
    &lt;/div&gt;
  
&lt;/div&gt;

&lt;p&gt;And with that, I made a pull request, and went to bed.&lt;/p&gt;

&lt;h2 id=&quot;making-it-dynamic-with-elm&quot;&gt;Making it dynamic with Elm&lt;/h2&gt;
&lt;p&gt;The next day, some strange miracle had occurred.&lt;/p&gt;

&lt;p&gt;Amitai had &lt;a href=&quot;https://github.com/Gizra/inbox-simulation/pull/6&quot;&gt;created a basic Elm app&lt;/a&gt;, &lt;a href=&quot;https://github.com/Gizra/inbox-simulation/pull/8&quot;&gt;converted my HTML markup to Elm&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Gizra/inbox-simulation/pull/12&quot;&gt;created a basic model for a functioning app&lt;/a&gt;. I had heard Amitai speak and have read about how Elm’s compiler, which catches runtime errors, makes development so much faster, but seeing it in action was pretty amazing. Our conversation on Github:&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/elm-inbox-simulator/github-conversation.jpg&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
    &lt;div class=&quot;ui attached center aligned caption segment&quot;&gt;
      The Elm is strong with this one.
    &lt;/div&gt;
  
&lt;/div&gt;

&lt;p&gt;Creating that dashboard referenced in the conversation was fairly easy too. Semantic UI has a lot of &lt;a href=&quot;http://semantic-ui.com/collections/table.html&quot;&gt;nice looking tables&lt;/a&gt; and classes to vary the look enough to get a lot of different options. I found one I liked, filled it with enough dummy data to give it the feel of a real dashboard, and we were all set.&lt;/p&gt;

&lt;p&gt;In the meantime, Amitai created a nifty little delayed response function. If you choose a particular response (in this case, some version of “ignore”), you get a followup email demanding your attention.&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/elm-inbox-simulator/delayed-response.gif&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
    &lt;div class=&quot;ui attached center aligned caption segment&quot;&gt;
      Don't ignore my emails!
    &lt;/div&gt;
  
&lt;/div&gt;

&lt;p&gt;We spent the next day or two refining features, polishing the layout, and replacing the dummy text.&lt;/p&gt;

&lt;p&gt;Of course, I needed to add a few tweaks to the layout, and add sample emails that were more realistic, and some logic that made sense. To do that I had to get into Elm and figure out how it works - in particular how to make it present the HTML syntax I needed. It turns out that was pretty logical and straightforward. I’ve barely scratched the surface, but I’m pretty pleased to have my first few commits on an Elm project.&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The Result&lt;/h2&gt;
&lt;p&gt;You can look at the &lt;a href=&quot;https://github.com/Gizra/inbox-simulation&quot;&gt;Github repository&lt;/a&gt; and try out the &lt;a href=&quot;http://inbox-simulation.gizra.com/&quot;&gt;sample application&lt;/a&gt;, but the final product is a simple response to a complex need. We got there in several days by breaking down a complex problem into small surmountable tasks - a method we call &lt;a href=&quot;/#gizra-way&quot;&gt;The Gizra Way&lt;/a&gt;. In this case, we ignored all other features, even how to permanently store the data – just a simple single page application that shows a realistic inbox with a few features. I never got my admin screen - there wasn’t enough time, and there’s other stuff to do.&lt;/p&gt;

&lt;p&gt;We are, of course, helped enormously by a robust set of web frameworks that are helping us do web tasks, faster, with greater flexibility, and with a preciseness like never before.&lt;/p&gt;

          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/elm-inbox-simulation//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/elm-inbox-simulation/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/elm-inbox-simulation</guid>
        <pubDate>Sat, 24 Sep 2016 00:00:00 -0500</pubDate>
      </item>
      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
      <item>
        <title>Elmctron - Build Desktop Apps with Elm and Electron</title>
        <description>
          &lt;p&gt;I work at Gizra, so it was only a matter of time before Elm infected me as well, and I think it’s growing on me.&lt;/p&gt;

&lt;p&gt;I wanted to build something a little different, not just the plain old TodoMVC. So, I harnessed every bit of creativity I had and came up with the most radical idea ever - I took the TodoMVC in Elm and got it to work in Electron, and called it &lt;code class=&quot;highlighter-rouge&quot;&gt;Elmctron&lt;/code&gt; (I know, so creative of me).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://electron.atom.io/&quot;&gt;Electron&lt;/a&gt; enables you to build cross platform desktop apps with web technologies. So we can take all the goodies we get with Elm and use them in our desktop application. It’s a brand new world!&lt;/p&gt;

&lt;p&gt;It was my thought that we should build a couple of gulp tasks to make our life easier - to do the bare minimum because after all, who wants to do more than we he have to? (let’s hope my boss will not read this part)&lt;/p&gt;

&lt;p&gt;So, with that in mind, the only commands I want to run are &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone ..&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt;. The gulp tasks should:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compile SASS to css.&lt;/li&gt;
  &lt;li&gt;Compile Elm to JS.&lt;/li&gt;
  &lt;li&gt;Watch and auto-reload.&lt;/li&gt;
  &lt;li&gt;Automagically download and install elm packages.&lt;/li&gt;
  &lt;li&gt;Start the electron app.&lt;/li&gt;
&lt;/ul&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/elm-electron-build//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/elm-electron-build/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/elm-with-electron</guid>
        <pubDate>Thu, 28 Jul 2016 00:00:00 -0500</pubDate>
      </item>
      
    
      
      

      
      <item>
        <title>Faithful Elm and the Amazing Router</title>
        <description>
          &lt;p&gt;&lt;a href=&quot;https://youtu.be/FgaoOgJ5CAU&quot;&gt;I gave&lt;/a&gt; an Elm session in &lt;a href=&quot;http://yougottalovefrontend.com/#page-speakers&quot;&gt;YGLF conf&lt;/a&gt;. This was a great excuse to free up some hours to work on a new v0.17 SPA (Single Page Application). You won’t believe what happened next…&lt;/p&gt;

&lt;p&gt;Well, actually, you would: it was an awesome experience. :)&lt;br /&gt;
In fact, I’ve reached the point that the backend me is becoming jealous of the frontend me.&lt;/p&gt;

&lt;div class=&quot;ui horizontal segments&quot;&gt;
  &lt;div class=&quot;ui center aligned secondary grey segment&quot;&gt;
    &lt;a class=&quot;demo&quot; target=&quot;_blank&quot; href=&quot;http://elm-spa-example.gizra.com/&quot;&gt;View demo&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&quot;ui center aligned secondary grey segment&quot;&gt;
    &lt;a class=&quot;code&quot; target=&quot;_blank&quot; href=&quot;https://github.com/Gizra/elm-spa-example&quot;&gt;Get the source code&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/faithful-elm-amazing-router/image1.gif&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
    &lt;div class=&quot;ui attached center aligned caption segment&quot;&gt;
      Fetch GitHub user's info on this fake login.
    &lt;/div&gt;
  
&lt;/div&gt;

&lt;p&gt;My goal with building this demo app, was to give a small, yet realistic, look into how Elm
allows us to accomplish daily tasks such as HTTP requests, routing, access, and more.
It was important for me to structure it in the same way that we structure larger apps built for production, so that it could demonstrate more effectively how Elm can be used in a project.&lt;/p&gt;

&lt;p&gt;If you are interested in Elm, and want to get a feeling of how it could be built for your apps, this might be a good starting point. I even wanted to add a single test to show how it could be done. But Elm being such a fun, predictable, opinionated, and fun (no mistake here, it deserves the double fun) to work with, I ended up adding more and more tests.&lt;br /&gt;
Isn’t that yet another great sign for Elm? I was adding unit tests for a &lt;em&gt;demo&lt;/em&gt; app, while we hardly added any unit tests for our Angular apps in production!&lt;/p&gt;

&lt;p&gt;I held myself back from adding too many features, but I couldn’t resist polishing the existing ones, and adding &lt;em&gt;lots&lt;/em&gt; of comments. With the compiler’s tough love and ever growing unit tests, changes were
so easy it almost felt like cheating (and note that I rarely write “easy” or “trivial” about development issues).&lt;/p&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/faithful-elm-amazing-router//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/faithful-elm-amazing-router/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/faithful-elm-amazing-router</guid>
        <pubDate>Thu, 16 Jun 2016 00:00:00 -0500</pubDate>
      </item>
      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
      <item>
        <title>How To Think Elm</title>
        <description>
          &lt;p&gt;The 2nd Elm - TLV meetup was lots of fun. But it was in Hebrew, and the intersection
between Hebrew speakers and Elm devs is still very limited.&lt;/p&gt;

&lt;p&gt;So I’ve re-recorded my presentation in English. If you haven’t ever seen Elm, or
already develop in Elm and want to better understand “how to think Elm” this presentation
might give you a nudge in the right direction.&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    
      &lt;iframe width=&quot;480&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/tx07ysIrAz8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
    

    
  &lt;/div&gt;


  
&lt;/div&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/how-think-elm//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/how-think-elm/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/how-think-elm</guid>
        <pubDate>Thu, 24 Mar 2016 00:00:00 -0500</pubDate>
      </item>
      
    
      
      

      
      <item>
        <title>Elm i18n and Type Safety</title>
        <description>
          &lt;p&gt;We’ve reached the point we needed to translate one of our Elm apps to multiple languages.&lt;/p&gt;

&lt;div class=&quot;ui horizontal segments&quot;&gt;
  &lt;div class=&quot;ui center aligned secondary grey segment&quot;&gt;
    &lt;a class=&quot;demo&quot; target=&quot;_blank&quot; href=&quot;https://gizra.github.io/elm-i18n-example/&quot;&gt;View demo&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&quot;ui center aligned secondary grey segment&quot;&gt;
    &lt;a class=&quot;code&quot; target=&quot;_blank&quot; href=&quot;https://github.com/Gizra/elm-i18n-example&quot;&gt;Get the source code&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/elm-i18n/image1.gif&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
&lt;/div&gt;

&lt;p&gt;We looked for existing solutions and stumbled upon the elm-i18n library. This
of course made us happy, to see that someone has already solved the problem for us. However, when we looked at the &lt;a href=&quot;https://github.com/lukewestby/elm-i18n/tree/84d7da3a51d52a89d1e3371bfeb4f34eab05341c#example&quot;&gt;example&lt;/a&gt; something felt missing. Type safety.&lt;/p&gt;

&lt;p&gt;In Gizra we deal most hours of our working days with PHP, so you can say we are
fearless developers. That is, we hope and believe our code is right, and
worst case we know we will catch our bugs on run time.&lt;/p&gt;

&lt;p&gt;But Elm can make us better developers, and give us some safety!&lt;/p&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/elm-i18n-type-safety//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/elm-i18n-type-safety/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/elm-i18n</guid>
        <pubDate>Thu, 24 Mar 2016 00:00:00 -0500</pubDate>
      </item>
      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
      <item>
        <title>Elm-Hedley, App Overview</title>
        <description>
          &lt;p&gt;In August 2015 I challenged myself (and later the rest of the Gizra devs) to create a typical web-app with all the bells and whistles in Elm. It’s called &lt;a href=&quot;https://gizra.github.io/elm-hedley&quot;&gt;elm-hedley&lt;/a&gt;, and I’m super proud it is now featuring in Elm’s &lt;a href=&quot;http://elm-lang.org/&quot;&gt;front page&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/elm-hedley-overview/image1.jpg&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
&lt;/div&gt;

&lt;p&gt;This post is going to give a high level overview and point out some parts that are worth noting. However, before diving into the technical section, it is important to emphasize the virtues of &lt;em&gt;simply doing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you would go back in the commits history you would see some nasty stuff that have been completely overhauled and polished. The only way of getting to that “improving” part is of course by starting! Only after that will one become smarter and recognize what needs improving, as well as be more experienced to know how to do it.&lt;/p&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/elm-hedley-overview//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/elm-hedley-overview/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/hedley-overview</guid>
        <pubDate>Wed, 30 Dec 2015 00:00:00 -0600</pubDate>
      </item>
      
    
      
      

      
      <item>
        <title>Planet Elm</title>
        <description>
          &lt;h2 id=&quot;planetelm-langorg-is-live&quot;&gt;&lt;a href=&quot;http://planet.elm-lang.org/&quot;&gt;planet.elm-lang.org&lt;/a&gt; is live!&lt;/h2&gt;

&lt;p&gt;Nice, right? Planet Elm and its &lt;a href=&quot;http://planet.elm-lang.org/feeds.xml&quot;&gt;RSS feed&lt;/a&gt; is up and running - just grab it, and the best Elm related posts would appear in your favorite RSS reader.&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/planet-elm/image1.jpg&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
&lt;/div&gt;

&lt;p&gt;I felt the need for such a site the day I started with Elm. Getting the Gizra devs to &lt;a href=&quot;https://github.com/Gizra/planet-elm&quot;&gt;build&lt;/a&gt; it was the next logical thing.&lt;/p&gt;

&lt;p&gt;Having this main site as a central place for aggregating all the interesting content about Elm is yet another step in getting Elm into the mainstream.&lt;/p&gt;

&lt;p&gt;If you maintain your own blog, go ahead, and &lt;a href=&quot;https://github.com/Gizra/planet-elm/wiki/Planet-Elm-guidelines&quot;&gt;submit your RSS feeds&lt;/a&gt;.&lt;/p&gt;

          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/planet-elm//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/planet-elm/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/planet-elm</guid>
        <pubDate>Mon, 23 Nov 2015 00:00:00 -0600</pubDate>
      </item>
      
    
      
      

      
    
      
      

      
      <item>
        <title>Elm Challenge</title>
        <description>
          &lt;p&gt;As part of our adoption of &lt;a href=&quot;/content/thinking-choosing-elm/&quot;&gt;Elm in production&lt;/a&gt;, Gizra devs are learning and practicing their Elm skills.&lt;/p&gt;

&lt;p&gt;After they are done going over the existing videos/tutorials, we let them get their hands dirty. &lt;a href=&quot;https://github.com/Gizra/elm-hedley&quot;&gt;elm-hedley&lt;/a&gt; was created just for that - to simulate a simple yet typical web app with login, RESTful, etc.&lt;/p&gt;

&lt;p&gt;Here’s the &lt;a href=&quot;https://gizra.github.io/elm-hedley&quot;&gt;existing app&lt;/a&gt;. As you see each event appears as a clickable link.&lt;/p&gt;

&lt;p&gt;The challenge is to add a counter next to each event label that increments when clicked. When you refresh the page (F5) it shouldn’t remember the previous clicks and should start back at 0.&lt;/p&gt;

&lt;p&gt;In short, it should look like this (notice the bottom left list):&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    
      &lt;iframe src=&quot;https://gfycat.com/ifr/MellowUnpleasantBoar&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;653&quot; height=&quot;390&quot; style=&quot;-webkit-backface-visibility: hidden;-webkit-transform: scale(1);&quot;&gt;&lt;/iframe&gt;
    

    
  &lt;/div&gt;


  
&lt;/div&gt;

&lt;p&gt;Go ahead, fork the repo and try for yourself. And don’t peek below, as it has the answer!&lt;/p&gt;

&lt;p&gt;.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;/p&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/elm-challenge//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/elm-challenge/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/elm-challenge</guid>
        <pubDate>Thu, 05 Nov 2015 00:00:00 -0600</pubDate>
      </item>
      
    
      
      

      
    
      
      

      
      <item>
        <title>Thinking (And Choosing) Elm</title>
        <description>
          &lt;p&gt;In my &lt;a href=&quot;https://www.gizra.com/content/elmlang-headless-drupal/&quot;&gt;last post&lt;/a&gt; I was giving a high level overview of why we were looking at Elm in Gizra. Since that post, we’ve almost completed the &lt;a href=&quot;https://gizra.github.io/elm-hedley&quot;&gt;demo app&lt;/a&gt;, and we’ve changed our status from “Looking at Elm” to “Choosing Elm”.&lt;/p&gt;

&lt;p&gt;The reason? In short - I believe it will save us money.&lt;br /&gt;
(Oh, and it’s fun)&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    
      &lt;iframe src=&quot;https://gfycat.com/ifr/BountifulGloomyChickadee&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;100%&quot; height=&quot;555&quot; style=&quot;-webkit-backface-visibility: hidden;-webkit-transform: scale(1);&quot;&gt;&lt;/iframe&gt;
    

    
  &lt;/div&gt;


  
&lt;/div&gt;


          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/thinking-choosing-elm//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/thinking-choosing-elm/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/thinking-elm</guid>
        <pubDate>Thu, 22 Oct 2015 00:00:00 -0500</pubDate>
      </item>
      
    
      
      

      
      <item>
        <title>Elm Loves Headless Drupal</title>
        <description>
          &lt;p&gt;Part of my job is to get my hands dirty with technologies I stumble upon. I’ve decided to have a go at React. Well, one thing led to the other and it seems I went down the client side rabbit hole. I’d like to share with you my path - watch out though, it’s a slippery slope.&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    

    
    &lt;div class=&quot;ui image&quot;&gt;
      &lt;img src=&quot;https://www.gizra.com/assets/images/posts/elmlang/image1.jpg&quot; /&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;


  
    &lt;div class=&quot;ui attached center aligned caption segment&quot;&gt;
      &amp;quot;Hello World&amp;quot; in &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;
    &lt;/div&gt;
  
&lt;/div&gt;

&lt;p&gt;It all started with this &lt;a href=&quot;https://www.youtube.com/watch?list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v&amp;amp;t=621&amp;amp;v=nYkdrAPrdcw&quot;&gt;Thinking Flux&lt;/a&gt; video which explains the problems Facebook faced in its front-end and the new application architecture they are now using.&lt;/p&gt;

&lt;p&gt;Since the Flux concept was out, different libraries were written implementing it, but in my view it seems that &lt;a href=&quot;http://rackt.github.io/redux/&quot;&gt;Redux&lt;/a&gt; is the winner in terms of simplicity, popularity, docs and community. I really recommend going over it - at least the intro and basics. You might be tempted to actually learn a bit of React (&lt;a href=&quot;http://facebook.github.io/react/docs/tutorial.html&quot;&gt;tutorial&lt;/a&gt;) to follow the examples more easily.&lt;/p&gt;

&lt;p&gt;Then I saw Redux was crediting &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; for some of its inspiration, so I decided to give it a quick look. I was immediately blown away by Elm. The syntax is weird (unless you know Haskell), it has a crazy learning curve, but a lot of it makes so much sense.&lt;/p&gt;

&lt;p&gt;The following recording is a presentation I first gave internally for Gizra devs, then as a BoF in DrupalCon Barcelona, and finally recorded to share it with everyone.&lt;/p&gt;

&lt;div class=&quot;ui segments&quot;&gt;
  &lt;div class=&quot;ui attached center aligned segment&quot;&gt;

    
      &lt;iframe width=&quot;100%&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/K_gTakI4Vfw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
    

    
  &lt;/div&gt;


  
&lt;/div&gt;

&lt;p&gt;My goal is to get more people excited about Elm so the community and contributions grows. I feel it is now very much like Drupal about 10 years ago - a small community, far from being mainstream, but with a lot of potential.&lt;/p&gt;

&lt;p&gt;Maybe if we’ll draw from Drupal’s experience in building and cultivating a community we’ll be able to bring this awesome tool closer to the mainstream.&lt;/p&gt;

          &lt;p&gt;&lt;a href=&quot;https://www.gizra.com/content/elmlang-headless-drupal//&quot;&gt;Continue reading…&lt;/a&gt;&lt;/p&gt;
        </description>
        <link>https://www.gizra.com/content/elmlang-headless-drupal/</link>
        <guid isPermaLink="false">https://www.gizra.com/content/elmlang</guid>
        <pubDate>Thu, 01 Oct 2015 00:00:00 -0500</pubDate>
      </item>
      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    
      
      

      
    

  </channel>
</rss>
